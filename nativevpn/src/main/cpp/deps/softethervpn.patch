diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0a622ab..17ea9d3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -27,7 +27,7 @@ project("SoftEther VPN"
 
 set(CMAKE_C_STANDARD 99)
 
-set(TOP_DIRECTORY ${CMAKE_SOURCE_DIR})
+set(TOP_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
 set(BUILD_DIRECTORY ${CMAKE_BINARY_DIR})
 
 # We define a dedicated variable because CMAKE_BUILD_TYPE can have different
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index c49a3c7..a30dc0e 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -135,42 +135,12 @@ add_subdirectory(Cedar)
 # Mayaqua kernel
 add_subdirectory(Mayaqua)
 
-# vpnserver
-add_subdirectory(vpnserver)
-
 # vpnclient
 add_subdirectory(vpnclient)
 
-# vpnbridge
-add_subdirectory(vpnbridge)
-
-# vpncmd
-add_subdirectory(vpncmd)
-
-# vpntest
-add_subdirectory(vpntest)
-
 # libhamcore
 add_subdirectory(libhamcore)
 
-# hamcorebuilder utility
-add_subdirectory(hamcorebuilder)
-
-# hamcore.se2 archive file
-add_custom_target(hamcore-archive-build
-  ALL
-  DEPENDS "${BUILD_DIRECTORY}/hamcore.se2"
-)
-
-add_custom_command(
-  COMMENT "Building hamcore.se2 archive file..."
-  COMMAND hamcorebuilder "hamcore.se2" "${TOP_DIRECTORY}/src/bin/hamcore"
-  DEPENDS hamcorebuilder "${TOP_DIRECTORY}/src/bin/hamcore/"
-  OUTPUT "${BUILD_DIRECTORY}/hamcore.se2"
-  WORKING_DIRECTORY "${BUILD_DIRECTORY}"
-  VERBATIM
-)
-
 if(WIN32)
   # PenCore
   add_subdirectory(PenCore)
diff --git a/src/Cedar/CMakeLists.txt b/src/Cedar/CMakeLists.txt
index 7818d79..f350672 100644
--- a/src/Cedar/CMakeLists.txt
+++ b/src/Cedar/CMakeLists.txt
@@ -21,10 +21,27 @@ set_target_properties(cedar
 
 target_link_libraries(cedar PUBLIC mayaqua)
 
-cmake_host_system_information(RESULT HAS_SSE2 QUERY HAS_SSE2)
+if(ANDROID_ABI STREQUAL "arm64-v8a")
+    set(HAS_NEON TRUE)
+elseif(ANDROID_ABI STREQUAL "armeabi-v7a")
+    set(HAS_NEON TRUE)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpu=neon")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpu=neon")
+elseif(ANDROID_ABI MATCHES "^(x86_64|x86)")
+    include(CheckIncludeFiles)
+    check_include_files("emmintrin.h" HAS_SSE2)
+endif()
 
-set(BLAKE2_SRC_PATH $<IF:$<BOOL:${HAS_SSE2}>,${TOP_DIRECTORY}/3rdparty/BLAKE2/sse,${TOP_DIRECTORY}/3rdparty/BLAKE2/ref>)
-set(BLAKE2_SRC $<IF:$<BOOL:${HAS_SSE2}>,${BLAKE2_SRC_PATH}/blake2s.c,${BLAKE2_SRC_PATH}/blake2s-ref.c>)
+if(HAS_SSE2)
+    set(BLAKE2_SRC_PATH ${TOP_DIRECTORY}/3rdparty/BLAKE2/sse)
+    set(BLAKE2_SRC ${BLAKE2_SRC_PATH}/blake2s.c)
+elseif(HAS_NEON)
+    set(BLAKE2_SRC_PATH ${TOP_DIRECTORY}/3rdparty/BLAKE2/neon)
+    set(BLAKE2_SRC ${BLAKE2_SRC_PATH}/blake2s.c)
+else()
+    set(BLAKE2_SRC_PATH ${TOP_DIRECTORY}/3rdparty/BLAKE2/ref)
+    set(BLAKE2_SRC ${BLAKE2_SRC_PATH}/blake2s-ref.c)
+endif()
 
 target_include_directories(cedar PUBLIC ${BLAKE2_SRC_PATH})
 target_sources(cedar PRIVATE ${BLAKE2_SRC})
@@ -40,10 +57,11 @@ if(VCPKG_TARGET_TRIPLET)
   target_link_libraries(cedar PUBLIC unofficial-sodium::sodium)
 else()
   find_package(PkgConfig REQUIRED)
-  pkg_search_module(SODIUM libsodium REQUIRED)
+  #pkg_search_module(SODIUM libsodium REQUIRED)
+  find_package(sodium REQUIRED)
   target_include_directories(cedar PUBLIC ${SODIUM_INCLUDE_DIRS})
   if(NOT ("$ENV{TRAVIS_CPU_ARCH}" STREQUAL ppc64le))
-    target_link_libraries(cedar PUBLIC $<IF:$<BOOL:SODIUM_LINK_LIBRARIES>,${SODIUM_LINK_LIBRARIES},${SODIUM_LIBRARIES}>)
+    target_link_libraries(cedar PUBLIC  androidhelpers $<IF:$<BOOL:SODIUM_LINK_LIBRARIES>,${SODIUM_LINK_LIBRARIES},${SODIUM_LIBRARIES}>)
   else()
     # TODO: investigate why on ppc64le the use of SODIUM_LINK_LIBRARIES causes undefined references to libsodium functions.
     target_link_libraries(cedar PUBLIC ${SODIUM_LIBRARIES})
@@ -62,10 +80,10 @@ if(WIN32)
 endif()
 
 if(UNIX)
-  find_package(Curses REQUIRED)
-  find_library(LIB_READLINE readline)
+  #find_package(Curses REQUIRED)
+  #find_library(LIB_READLINE readline)
 
-  target_link_libraries(cedar PRIVATE ${CURSES_LIBRARIES} ${LIB_READLINE})
+  #target_link_libraries(cedar PRIVATE ${CURSES_LIBRARIES} ${LIB_READLINE})
 
   if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
     target_link_libraries(cedar PRIVATE mayaqua pcap)
diff --git a/src/Cedar/Console.c b/src/Cedar/Console.c
index 45bab42..57d1fd1 100644
--- a/src/Cedar/Console.c
+++ b/src/Cedar/Console.c
@@ -28,9 +28,14 @@
 #include <termios.h>
 #include <sys/ioctl.h>
 
+#ifndef __ANDROID__
 #include <readline/readline.h>
 #include <readline/history.h>
 #endif
+#ifdef __ANDROID__
+#include <androidhelpers.h>
+#endif
+#endif
 
 // Display the help for the command
 void PrintCmdHelp(CONSOLE *c, char *cmd_name, TOKEN_LIST *param_list)
@@ -2037,7 +2042,11 @@ wchar_t *Prompt(wchar_t *prompt_str)
 #else	// OS_WIN32
 	{
 		char *prompt = CopyUniToStr(prompt_str);
+		#ifdef __ANDROID__
+		char *s = strdup("");
+		#else
 		char *s = readline(prompt);
+		#endif
 		Free(prompt);
 
 		if (s != NULL)
@@ -2047,7 +2056,9 @@ wchar_t *Prompt(wchar_t *prompt_str)
 
 			if (IsEmptyStr(s) == false)
 			{
+				#ifndef __ANDROID__
 				add_history(s);
+				#endif
 			}
 
 			ret = CopyStrToUni(s);
diff --git a/src/Mayaqua/CMakeLists.txt b/src/Mayaqua/CMakeLists.txt
index 51acec0..08ae740 100644
--- a/src/Mayaqua/CMakeLists.txt
+++ b/src/Mayaqua/CMakeLists.txt
@@ -47,7 +47,7 @@ unset(CMAKE_REQUIRED_INCLUDES)
 unset(CMAKE_REQUIRED_LIBRARIES)
 
 if(NOT HAVE_EVP_PKEY_GET_RAW_PUBLIC_KEY)
-  message(FATAL_ERROR "Required EVP_PKEY_get_raw_public_key() not found in OpenSSL library!")
+  #message(FATAL_ERROR "Required EVP_PKEY_get_raw_public_key() not found in OpenSSL library!")
 endif()
 
 if (HAVE_SSL_CTX_SET_NUM_TICKETS)
@@ -67,6 +67,7 @@ target_link_libraries(mayaqua
     OpenSSL::SSL
     OpenSSL::Crypto
     ZLIB::ZLIB
+    androidhelpers
 )
 
 if(WIN32)
diff --git a/src/Mayaqua/FileIO.c b/src/Mayaqua/FileIO.c
index 5e4b9c9..22b4421 100644
--- a/src/Mayaqua/FileIO.c
+++ b/src/Mayaqua/FileIO.c
@@ -18,6 +18,10 @@
 #include "Unix.h"
 #include "Win32.h"
 
+#ifdef __ANDROID__
+#include <androidhelpers.h>
+#endif
+
 #include <Hamcore.h>
 
 static char exe_file_name[MAX_SIZE] = "/tmp/a.out";
@@ -871,6 +875,11 @@ int CompareHamcore(void *p1, void *p2)
 // Getting the name of the directory where the EXE file is in
 void GetExeDir(char *name, UINT size)
 {
+#ifdef __ANDROID__
+    char* tmp = GetAndroidTmpDir();
+    StrCpy(name, size, tmp);
+    free(tmp);
+#else
 	// Validate arguments
 	if (name == NULL)
 	{
@@ -878,6 +887,7 @@ void GetExeDir(char *name, UINT size)
 	}
 
 	GetDirNameFromFilePath(name, size, exe_file_name);
+#endif
 }
 void GetExeDirW(wchar_t *name, UINT size)
 {
@@ -916,6 +926,10 @@ void GetLogDir(char *name, UINT size)
 {
 #ifdef SE_LOGDIR
 	Format(name, size, SE_LOGDIR);
+#elif __ANDROID__
+	 char* tmp = GetAndroidLogDir();
+	 StrCpy(name, size, tmp);
+	 free(tmp);
 #else
 	GetExeDir(name, size);
 #endif
@@ -934,6 +948,10 @@ void GetDbDir(char *name, UINT size)
 {
 #ifdef SE_DBDIR
 	Format(name, size, SE_DBDIR);
+#elif __ANDROID__
+	  char* tmp = GetAndroidDbDir();
+	  StrCpy(name, size, tmp);
+	  free(tmp);
 #else
 	GetExeDir(name, size);
 #endif
@@ -952,6 +970,10 @@ void GetPidDir(char *name, UINT size)
 {
 #ifdef SE_PIDDIR
 	Format(name, size, SE_PIDDIR);
+#elif __ANDROID__
+	    char* tmp = GetAndroidTmpDir();
+	    StrCpy(name, size, tmp);
+		free(tmp);
 #else
 	GetExeDir(name, size);
 #endif
diff --git a/src/Mayaqua/Mayaqua.c b/src/Mayaqua/Mayaqua.c
index 8649275..ac8ee97 100644
--- a/src/Mayaqua/Mayaqua.c
+++ b/src/Mayaqua/Mayaqua.c
@@ -22,6 +22,10 @@
 #include "Tick64.h"
 #include "Tracking.h"
 
+#ifdef __ANDROID__
+#include <androidhelpers.h>
+#endif
+
 #include <locale.h>
 #include <stdlib.h>
 
@@ -622,11 +626,17 @@ void CheckUnixTempDir()
 		UINT64 now = SystemTime64();
 		IO *o;
 
-		MakeDir("/tmp");
+		#ifdef __ANDROID__
+		char* tmpDir = GetAndroidTmpDir();
+		#else
+		char* tmpDir = "/tmp";
+		#endif
+
+		MakeDir(tmpDir);
 
 		Format(tmp2, sizeof(tmp2), "%I64u", now);
 
-		Format(tmp, sizeof(tmp), "/tmp/.%s", tmp2);
+		Format(tmp, sizeof(tmp), "%s/.%s", tmpDir, tmp2);
 
 		o = FileCreate(tmp);
 		if (o == NULL)
@@ -634,14 +644,17 @@ void CheckUnixTempDir()
 			o = FileOpen(tmp, false);
 			if (o == NULL)
 			{
-				Print("Unable to use /tmp.\n\n");
-				exit(0);
+				Print("Unable to use temporary dir: (%s).\n\n", tmpDir);
+				exit(EXIT_FAILURE);
 			}
 		}
 
 		FileClose(o);
 
 		FileDelete(tmp);
+		#ifdef __ANDROID__
+		free(tmpDir);
+		#endif
 	}
 }
 
diff --git a/src/Mayaqua/Str.c b/src/Mayaqua/Str.c
index 555d2d2..53d1072 100644
--- a/src/Mayaqua/Str.c
+++ b/src/Mayaqua/Str.c
@@ -18,6 +18,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifdef __ANDROID__
+#include <androidhelpers.h>
+#endif
 
 // Locking for call the token handling function
 LOCK *token_lock = NULL;
diff --git a/src/Mayaqua/Unix.c b/src/Mayaqua/Unix.c
index 0c3778d..2ad6b08 100755
--- a/src/Mayaqua/Unix.c
+++ b/src/Mayaqua/Unix.c
@@ -80,6 +80,11 @@ struct statfs {
 #endif	// NO_VLAN
 #endif	// UNIX_MACOS
 
+#ifdef __ANDROID__
+#include <sys/vfs.h>
+#include<androidhelpers.h>
+#endif
+
 // Scandir() function for Solaris
 #ifdef	UNIX_SOLARIS
 #define scandir local_scandir
@@ -2737,6 +2742,14 @@ UINT UnixService(int argc, char *argv[], char *name, SERVICE_FUNCTION *start, SE
 		return 0;
 	}
 
+#ifdef __ANDROID__
+	// On Android, directly call UnixServiceMain without forking
+	if (argc >= 2 && StrCmpi(argv[1], UNIX_SVC_ARG_EXEC_SVC) == 0) {
+		UnixServiceMain(argc, argv, name, start, stop);
+	} else {
+		exit(EXIT_FAILURE);
+	}
+#else
 	if (argc >= 2 && StrCmpi(argv[1], UNIX_SVC_ARG_EXEC_SVC) == 0)
 	{
 		UINT pid;
@@ -2788,6 +2801,7 @@ RESTART_PROCESS:
 	}
 
 	return 0;
+	#endif
 }
 void UnixServiceMain(int argc, char *argv[], char *name, SERVICE_FUNCTION *start, SERVICE_FUNCTION *stop)
 {
diff --git a/src/vpnclient/CMakeLists.txt b/src/vpnclient/CMakeLists.txt
index 528a637..957bf79 100644
--- a/src/vpnclient/CMakeLists.txt
+++ b/src/vpnclient/CMakeLists.txt
@@ -19,7 +19,9 @@ if(WIN32)
   configure_file("${TOP_DIRECTORY}/src/BuildFiles/VerScript/ver.rc" "${CMAKE_CURRENT_BINARY_DIR}/ver.rc")
   target_sources(vpnclient PRIVATE "vpnclient.rc" "${CMAKE_CURRENT_BINARY_DIR}/ver.rc")
 else()
-  add_executable(vpnclient "vpncsvc.c")
+  add_library(vpnclient SHARED
+    vpncsvc.c
+  )
 endif()
 
 set_target_properties(vpnclient
diff --git a/src/vpnclient/vpncsvc.c b/src/vpnclient/vpncsvc.c
index 74d6da0..94bc87c 100644
--- a/src/vpnclient/vpncsvc.c
+++ b/src/vpnclient/vpncsvc.c
@@ -43,4 +43,10 @@ int main(int argc, char *argv[])
 #endif	// OS_WIN32
 }
 
+#ifdef __ANDROID__
+extern int VpnClientMain(int argc, char *argv[]) {
+    return main(argc,argv);
+}
+#endif
+
 
